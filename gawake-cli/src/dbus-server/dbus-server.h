/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUS_SERVER_H__
#define __DBUS_SERVER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for io.github.kelvinnovais.Database */

#define GAWAKE_SERVER_TYPE_DATABASE (gawake_server_database_get_type ())
#define GAWAKE_SERVER_DATABASE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GAWAKE_SERVER_TYPE_DATABASE, GawakeServerDatabase))
#define GAWAKE_SERVER_IS_DATABASE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GAWAKE_SERVER_TYPE_DATABASE))
#define GAWAKE_SERVER_DATABASE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GAWAKE_SERVER_TYPE_DATABASE, GawakeServerDatabaseIface))

struct _GawakeServerDatabase;
typedef struct _GawakeServerDatabase GawakeServerDatabase;
typedef struct _GawakeServerDatabaseIface GawakeServerDatabaseIface;

struct _GawakeServerDatabaseIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    guchar arg_mode,
    guchar arg_table);

  gboolean (*handle_cancel_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_custom_schedule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guchar arg_hour,
    guchar arg_minutes,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_mode);

  gboolean (*handle_delete_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_id,
    guchar arg_table);

  gboolean (*handle_edit_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_id,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    gboolean arg_active,
    guchar arg_mode,
    guchar arg_table);

  gboolean (*handle_enable_disable_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_id,
    guchar arg_table,
    gboolean arg_active);

  gboolean (*handle_query_rule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_id,
    guchar arg_table);

  gboolean (*handle_query_rules) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    guchar arg_table);

  gboolean (*handle_schedule) (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation);

  void (*database_updated) (
    GawakeServerDatabase *object);

  void (*rule_canceled) (
    GawakeServerDatabase *object);

  void (*schedule_requested) (
    GawakeServerDatabase *object,
    gboolean arg_have_args);

};

GType gawake_server_database_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gawake_server_database_interface_info (void);
guint gawake_server_database_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gawake_server_database_complete_add_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gawake_server_database_complete_edit_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gawake_server_database_complete_delete_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gawake_server_database_complete_enable_disable_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gawake_server_database_complete_query_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    GVariant *rule,
    gboolean success);

void gawake_server_database_complete_query_rules (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    GVariant *rules,
    gboolean success);

void gawake_server_database_complete_cancel_rule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation);

void gawake_server_database_complete_schedule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation);

void gawake_server_database_complete_custom_schedule (
    GawakeServerDatabase *object,
    GDBusMethodInvocation *invocation,
    gboolean success);



/* D-Bus signal emissions functions: */
void gawake_server_database_emit_database_updated (
    GawakeServerDatabase *object);

void gawake_server_database_emit_rule_canceled (
    GawakeServerDatabase *object);

void gawake_server_database_emit_schedule_requested (
    GawakeServerDatabase *object,
    gboolean arg_have_args);



/* D-Bus method calls: */
void gawake_server_database_call_add_rule (
    GawakeServerDatabase *proxy,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    guchar arg_mode,
    guchar arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_add_rule_finish (
    GawakeServerDatabase *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_add_rule_sync (
    GawakeServerDatabase *proxy,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    guchar arg_mode,
    guchar arg_table,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_edit_rule (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    gboolean arg_active,
    guchar arg_mode,
    guchar arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_edit_rule_finish (
    GawakeServerDatabase *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_edit_rule_sync (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    const gchar *arg_name,
    guchar arg_hour,
    guchar arg_minutes,
    gboolean arg_day_0,
    gboolean arg_day_1,
    gboolean arg_day_2,
    gboolean arg_day_3,
    gboolean arg_day_4,
    gboolean arg_day_5,
    gboolean arg_day_6,
    gboolean arg_active,
    guchar arg_mode,
    guchar arg_table,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_delete_rule (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_delete_rule_finish (
    GawakeServerDatabase *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_delete_rule_sync (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_enable_disable_rule (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    gboolean arg_active,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_enable_disable_rule_finish (
    GawakeServerDatabase *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_enable_disable_rule_sync (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    gboolean arg_active,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_query_rule (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_query_rule_finish (
    GawakeServerDatabase *proxy,
    GVariant **out_rule,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_query_rule_sync (
    GawakeServerDatabase *proxy,
    guint16 arg_id,
    guchar arg_table,
    GVariant **out_rule,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_query_rules (
    GawakeServerDatabase *proxy,
    guchar arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_query_rules_finish (
    GawakeServerDatabase *proxy,
    GVariant **out_rules,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_query_rules_sync (
    GawakeServerDatabase *proxy,
    guchar arg_table,
    GVariant **out_rules,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_cancel_rule (
    GawakeServerDatabase *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_cancel_rule_finish (
    GawakeServerDatabase *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_cancel_rule_sync (
    GawakeServerDatabase *proxy,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_schedule (
    GawakeServerDatabase *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_schedule_finish (
    GawakeServerDatabase *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_schedule_sync (
    GawakeServerDatabase *proxy,
    GCancellable *cancellable,
    GError **error);

void gawake_server_database_call_custom_schedule (
    GawakeServerDatabase *proxy,
    guchar arg_hour,
    guchar arg_minutes,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gawake_server_database_call_custom_schedule_finish (
    GawakeServerDatabase *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gawake_server_database_call_custom_schedule_sync (
    GawakeServerDatabase *proxy,
    guchar arg_hour,
    guchar arg_minutes,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_mode,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GAWAKE_SERVER_TYPE_DATABASE_PROXY (gawake_server_database_proxy_get_type ())
#define GAWAKE_SERVER_DATABASE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GAWAKE_SERVER_TYPE_DATABASE_PROXY, GawakeServerDatabaseProxy))
#define GAWAKE_SERVER_DATABASE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GAWAKE_SERVER_TYPE_DATABASE_PROXY, GawakeServerDatabaseProxyClass))
#define GAWAKE_SERVER_DATABASE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GAWAKE_SERVER_TYPE_DATABASE_PROXY, GawakeServerDatabaseProxyClass))
#define GAWAKE_SERVER_IS_DATABASE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GAWAKE_SERVER_TYPE_DATABASE_PROXY))
#define GAWAKE_SERVER_IS_DATABASE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GAWAKE_SERVER_TYPE_DATABASE_PROXY))

typedef struct _GawakeServerDatabaseProxy GawakeServerDatabaseProxy;
typedef struct _GawakeServerDatabaseProxyClass GawakeServerDatabaseProxyClass;
typedef struct _GawakeServerDatabaseProxyPrivate GawakeServerDatabaseProxyPrivate;

struct _GawakeServerDatabaseProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GawakeServerDatabaseProxyPrivate *priv;
};

struct _GawakeServerDatabaseProxyClass
{
  GDBusProxyClass parent_class;
};

GType gawake_server_database_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GawakeServerDatabaseProxy, g_object_unref)
#endif

void gawake_server_database_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GawakeServerDatabase *gawake_server_database_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GawakeServerDatabase *gawake_server_database_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gawake_server_database_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GawakeServerDatabase *gawake_server_database_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GawakeServerDatabase *gawake_server_database_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GAWAKE_SERVER_TYPE_DATABASE_SKELETON (gawake_server_database_skeleton_get_type ())
#define GAWAKE_SERVER_DATABASE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GAWAKE_SERVER_TYPE_DATABASE_SKELETON, GawakeServerDatabaseSkeleton))
#define GAWAKE_SERVER_DATABASE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GAWAKE_SERVER_TYPE_DATABASE_SKELETON, GawakeServerDatabaseSkeletonClass))
#define GAWAKE_SERVER_DATABASE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GAWAKE_SERVER_TYPE_DATABASE_SKELETON, GawakeServerDatabaseSkeletonClass))
#define GAWAKE_SERVER_IS_DATABASE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GAWAKE_SERVER_TYPE_DATABASE_SKELETON))
#define GAWAKE_SERVER_IS_DATABASE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GAWAKE_SERVER_TYPE_DATABASE_SKELETON))

typedef struct _GawakeServerDatabaseSkeleton GawakeServerDatabaseSkeleton;
typedef struct _GawakeServerDatabaseSkeletonClass GawakeServerDatabaseSkeletonClass;
typedef struct _GawakeServerDatabaseSkeletonPrivate GawakeServerDatabaseSkeletonPrivate;

struct _GawakeServerDatabaseSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GawakeServerDatabaseSkeletonPrivate *priv;
};

struct _GawakeServerDatabaseSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gawake_server_database_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GawakeServerDatabaseSkeleton, g_object_unref)
#endif

GawakeServerDatabase *gawake_server_database_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_SERVER_H__ */
